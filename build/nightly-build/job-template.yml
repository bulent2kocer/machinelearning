parameters:
  name: ''
  architecture: x64
  buildScript: ''
  pool: {}
  customMatrixes: ''
  container: ''

jobs:
  - job: ${{ parameters.name }}
    timeoutInMinutes: 20
    strategy:
      matrix:
        ${{ if eq(parameters.customMatrixes, '') }}:
          Debug_Build:
            _configuration: Debug
            _config_short: D
            _includeBenchmarkData: false
          Release_Build:
            _configuration: Release
            _config_short: R
            _includeBenchmarkData: true
        ${{ if ne(parameters.customMatrixes, '') }}:
          ${{ insert }}: ${{ parameters.customMatrixes }}
    
    pool: ${{ parameters.pool }}
    ${{ if ne(parameters.container, '') }}:
      container: ${{ parameters.container }}

    steps:
    - ${{ if eq(parameters.pool.name, 'Hosted macOS High Sierra') }}:
      - script: brew update && brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/f5b1ac99a7fba27c19cee0bc4f036775c889b359/Formula/libomp.rb && brew install mono-libgdiplus gettext && brew link gettext --force && brew link libomp --force
        displayName: Install build dependencies
    - script: ${{ parameters.buildScript }} -$(_configuration) -buildArch=${{ parameters.architecture }}
      displayName: Builds
    - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet restore $(Build.SourcesDirectory)/test/Microsoft.ML.NightlyBuild.Tests/Microsoft.ML.NightlyBuild.Tests.csproj
      displayName: Restore dotnet cli
    - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet list $(Build.SourcesDirectory)/test/Microsoft.ML.NightlyBuild.Tests/Microsoft.ML.NightlyBuild.Tests.csproj package --source https://pkgs.dev.azure.com/dnceng/public/_packaging/MachineLearning/nuget/v3/index.json --outdated
      displayName: List latest package versions on screen
    - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet list $(Build.SourcesDirectory)/test/Microsoft.ML.NightlyBuild.Tests/Microsoft.ML.NightlyBuild.Tests.csproj package --source https://pkgs.dev.azure.com/dnceng/public/_packaging/MachineLearning/nuget/v3/index.json --outdated > $(Build.SourcesDirectory)/test/Microsoft.ML.NugetPackageVersionUpdater/latest_versions.txt
      displayName: List latest package versions
    - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet run --project $(Build.SourcesDirectory)/test/Microsoft.ML.NugetPackageVersionUpdater/Microsoft.ML.NugetPackageVersionUpdater.csproj
      displayName: Update package version
    # - script: ${{ parameters.buildScript }} -$(_configuration) -buildArch=${{ parameters.architecture }}
    #   displayName: Builds second time to take updated packages
    # - script: $(Build.SourcesDirectory)/Tools/dotnetcli/dotnet msbuild -restore $(Build.SourcesDirectory)/test/Microsoft.ML.NightlyBuild.Tests/Microsoft.ML.NightlyBuild.Tests.csproj /p:ReferenceTypeForTestFramework="Nuget"
    #   displayName: Build Nightly Build Project with latest package versions
    - script: ${{ parameters.buildScript }} -$(_configuration) -runnightlybuildtests
      displayName: Run Nightly Build Tests
      condition: succeeded()
    - task: PublishTestResults@2
      displayName: Publish Test Results
      condition: succeededOrFailed()
      inputs:
        testRunner: 'vSTest'
        searchFolder: '$(System.DefaultWorkingDirectory)/bin'
        testResultsFiles: '**/*.trx'
        testRunTitle: Machinelearning_Tests_${{ parameters.name }}_$(_configuration)_$(Build.BuildNumber)
        configuration: $(_configuration)
        mergeTestResults: true
    - task: CopyFiles@2
      displayName: Stage build logs
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)
        contents: '?(msbuild.*|binclash.log|init-tools.log)'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: CopyFiles@2
      displayName: Stage test output
      condition: not(succeeded())
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/bin
        contents: |
          **/TestOutput/**/*
          **/*.trx
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: Publish build and test logs
      condition: not(succeeded())
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: ${{ parameters.name }} $(_config_short)
        artifactType: container
    - ${{ if eq(parameters.buildScript, 'build.cmd') }}:
      - powershell: |
                  $taskListOutput = & TaskList /FI "IMAGENAME eq dotnet.exe" | Out-String
                  if ($taskListOutput.Contains("dotnet.exe"))
                  {
                      Write-Output "Killing dotnet.exe processes..."
                      & taskkill /IM dotnet.exe /F
                  }

                  if (Test-Path .\packages\)
                  {
                      Write-Output "Removing nuget cache dir..."
                      Remove-Item -Force -Recurse .\packages\
                  }

                  if (Test-Path .\test\data\external\)
                  {
                      Write-Output "Removing external test data..."
                      Remove-Item -Force -Recurse .\test\data\external\
                  }

                  mkdir .\tmp\
                  Move-Item .\bin\obj\packages .\tmp\
                  Write-Output "Removing bin dir..."
                  Remove-Item -Force -Recurse .\bin\
                  mkdir .\bin\obj\
                  Move-Item .\tmp\packages\ .\bin\obj\
                  Remove-Item -Force -Recurse .\tmp\
                  Write-Output "Done cleaning up binary folder..."
        displayName: Clean up test data